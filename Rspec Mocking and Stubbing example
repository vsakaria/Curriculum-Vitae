context 'when User clicks Get Started' do
    before { @code = { 'response' => { 'code' => '200'} } }
    
    it 'should create an Ambassador and redirect to show ' do
      HTTParty.stub(:get).and_return(@code)
      post :create
      expect(response).to redirect_to action: :show
    end

    it 'should set the user as an Ambassador on Db' do
      HTTParty.stub(:get).and_return(@code)
      post :create
      expect(@user.reload.ambassador?).to eq(true)
    end
end



context "create a new domain" do
  let!(:unique_domain) { create(:domain, shop: shop, name: "domain.mysupadupa.me") }

  before(:all) do
    Domain.delete_all
  end

  it "should increment the suffix by 1 if the domain exists" do
    @repeat_domain = build(:domain, shop: shop, name: "domain.mysupadupa.me")
    expect { @repeat_domain.send(:handle_suffix) }.to change { @repeat_domain.name }.to 'domain-1.mysupadupa.me'
  end
end



context 'Import more then 200 products' do
  it "should fetch 2 page of JSON" do
    @importer = BigCartelImporter.new(shop.id, 'www.bind.com/')
    @store_response['products_count'] = 201
    @importer.stub(:bc_shop).and_return(@store_response)
    @importer.should_receive(:fetch_remote).exactly(3).times.and_return(@products_response)
    @importer.send(:bc_products)
  end
end



context "when shop is reffered" do
  it "should trigger AmbassadorNotifyJob DelayedJob" do
    shop.stub(:referred?).and_return true

    ambassador = double 'ambassador'
    AmbassadorNotifyJob.should_receive(:new).with(shop, anything).and_return ambassador

    Delayed::Job.should_receive(:enqueue).with ambassador
    post :create, Hash.from_xml(@example)
  end
end
